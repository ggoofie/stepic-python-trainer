"""

Кривая Коха -- это простой геометрический фрактал. 

Строится этот фрактал следующим образом: берётся отрезок, разделяется на три равных части. Вместо средней части вставляется два таких же отрезка, поставленные под углом 60 градусов друг к другу (см. иллюстрацию, переход от n=0 к n=1).

Этот процесс повторяется на каждой итерации: каждый отрезок заменяется четырьмя.

Напишите программу, которая принимает на вход число n − количество итераций генерации кривой и выводит последовательность углов поворота при рисовании соответствующей линии от начальной точки к конечной, без отрыва пера.

Способ проверки своего решения приведён на следующем степе.

Формат ввода:
Строка с целым числом n, 1≤n≤10.

Формат вывода:

Строки, содержащие последовательность поворотов. Каждый поворот указывается на отдельной строке как слово "turn" и угол поворота в градусах. Угол поворота должен находиться в интервале [-180; 180].

Sample Input:

1
Sample Output:

turn 60
turn -120
turn 60
___________________________________
Python включает в себя библиотеку turtle, позволяющую рисовать с помощью так называемой "черепашки".

Нам потребуется несколько простых команд: 

turtle.forward(length)
turtle.left(degree)
Вот простой скрипт, который рисует кривую коха заданного поколения:

import turtle

def koch_turns(n):
    ...   # здесь должна быть реализация функции, 
          # генерирующей последовательность чисел, задающих повороты линии.

def turtle_koch_curve(n, line_length=10):
    for move in koch_turns(n):
        turtle.forward(line_length)
        turtle.left(move)
    turtle.forward(line_length)
Вызовите функцию turtle_koch_curve от числа, задающего нужное поколение и вы увидите процесс рисования фрактала черепашкой. При необходимости задайте своё значение длины базового сегмента.

Если возникает ошибка, попробуйте установить модуль tk.

Обратите внимание, что функция koch_turns должна возвращать последовательность чисел, например

print(list(koch_turns(1)))  # [60, -120, 60]
"""

def koch_turns(n, first_step=[60, -120, 60]):
    if n <= 1:
        yield from first_step
    else:
        yield from koch_turns(n - 1, first_step)
        for i in first_step:
            yield(i)
            yield from koch_turns(n - 1, first_step)
   
   
def turtle_koch_curve(n, line_length=10):
    for move in koch_turns(n):
        turtle.forward(line_length)
        turtle.left(move)
    turtle.forward(line_length)
    turtle.mainloop()


def main():
    n = int(input())
    for turn in koch_turns(n):
        print('turn', turn, sep=' ')


if __name__ == '__main__':
    main()

    
